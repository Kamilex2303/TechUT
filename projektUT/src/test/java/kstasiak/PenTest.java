package kstasiak;

import kstasiak.domain.Barcode;
import kstasiak.domain.Pen;
import kstasiak.domain.Producer;
import kstasiak.domain.User;
import kstasiak.service.BarcodeManager;
import kstasiak.service.PenManager;
import kstasiak.service.ProducerManager;
import kstasiak.service.UserManager;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:/beans.xml"})
@TransactionConfiguration(transactionManager = "txManager", defaultRollback = true)
@Transactional
public class PenTest {

    @Autowired
    PenManager penm;
    @Autowired
    UserManager um;
    @Autowired
    BarcodeManager bm;
    @Autowired
    ProducerManager pm;

    private static final double DELTA = 1e-15;
    
    private static String sDate = "01-01-2019";
	private static Date dDate;
	static {
		try {
			dDate = new SimpleDateFormat("dd-MM-yyyy").parse(sDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

    private final String NAME_1 = "Kamil";
    private final String SURNAME_1 = "Stasiak";

    private final String NAME_2 = "Test";
    private final String SURNAME_2 = "Test";

    private final String MODEL_NAME_1 = "PARKER";



    @Test
    public void addPenCheck() {
        Pen p = new Pen(1, dDate, true);
        penm.addPen(p);
        Pen found = penm.findById(p.getId());
        assertEquals(p.getId(), found.getId());
    }

    @Test
    public void getAllPensCheck() {
        List<Pen> before = penm.getAllPens();
        Pen p1 = new Pen(1, dDate, true);
        Pen p2 = new Pen(2, dDate, false);
        penm.addPen(p1);
        penm.addPen(p2);
        List<Pen> after = penm.getAllPens();
        assertEquals(before.size() + 2, after.size());
    }

    @Test
    public void findPenByIdCheck() {
    	Pen p = new Pen(1, dDate, true);
        penm.addPen(p);
        long id = p.getId();
        Pen found = penm.findById(id);
        assertEquals(p.getId(), found.getId());
    }

    @Test
    public void deletePenCheck() {

    	Pen p = new Pen(1, dDate, true);
        penm.addPen(p);
        List<Pen> before = penm.getAllPens();
        penm.deletePen(p);
        List<Pen> after = penm.getAllPens();

        assertEquals(before.size()-1, after.size());
    }

    @Test
    public void giveBarcodeTest() {
        Pen pen = new Pen(1, dDate, true);
        penm.addPen(pen);
        Barcode barcode = new Barcode("68754544329");
        bm.addBarcode(barcode);
        penm.giveBarcode(pen.getId(), barcode.getId());
        assertEquals(pen.getBarcode().getId(), barcode.getId());
    }

	@Test
    public void updatePenCheck() {
    	Pen p = new Pen(1, dDate, true);
        penm.addPen(p);
        double newPrice = 10;
        p.setPrice(newPrice);
        penm.updatePen(p);
        assertEquals(p.getPrice(), newPrice, DELTA);
    }
    
    @Test
    public void penAndUserCheck() {
        User u1= new User(NAME_1, SURNAME_1);
        User u2 = new User(NAME_1, SURNAME_2);
        um.addUser(u1);
        um.addUser(u2);
    	Pen p1 = new Pen(1, dDate, true);
    	Pen p2 = new Pen(2, dDate, false);
        penm.addPen(p1);
        penm.addPen(p2);
        List<User> usersOneBefore = penm.getUsers(p1);
        List<User> usersTwoBefore = penm.getUsers(p2);
        int beforeOne = usersOneBefore.size();
        int beforeTwo = usersTwoBefore.size();
        penm.relatePenAndUser(p1.getId(), u1.getId());
        penm.relatePenAndUser(p1.getId(), u2.getId());
        penm.relatePenAndUser(p2.getId(), u1.getId());
        penm.relatePenAndUser(p2.getId(), u2.getId());
        List<User> usersOneAfter = penm.getUsers(p1);
        List<User> usersTwoAfter = penm.getUsers(p2);
        int afterOne = usersOneAfter.size();
        int afterTwo = usersTwoAfter.size();
        assertEquals(beforeOne + 2, afterOne);
        assertEquals(beforeTwo + 2, afterTwo);
        assertEquals(p1.getUsers().get(afterOne-2).getName(), u1.getName());
        assertEquals(p1.getUsers().get(afterOne-1).getName(), u2.getName());
        assertEquals(p2.getUsers().get(afterTwo-2).getName(), u1.getName());
        assertEquals(p2.getUsers().get(afterTwo-1).getName(), u2.getName());
    }
    
    @Test
    public void penAndProducersTest() {
    	Pen pen = new Pen(1, dDate, true);
        penm.addPen(pen);
        Producer producer = new Producer(MODEL_NAME_1);
        pm.addProducer(producer);
        pm.assignPen(pen.getId(), producer.getId());
        assertTrue(producer.getPens().contains(pen));
    }
}